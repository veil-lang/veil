// Optional Types in Veil Language
// Optional types use `?` syntax and `None` for null values.
// Values auto-wrap, no need for explicit `Some()`!

import "std/io";
fn main() {
    println("=== Optional Types Demo ===");

    let number: i32? = 42;   
    let text: string? = "hello"; 
    let empty: i32? = None;       

    println(`Number: ${number}`);
    println(`Empty: ${empty}`); 

    process_optional(number);
    process_optional(empty);  

    let result = get_value(true); 
    let none_result = get_value(false);

    let nested: i32?? = 42; 
    println("=== Demo Complete ===");
}

fn process_optional(value: i32?) {
    println(`Processing: ${value}`);
}

fn get_value(found: bool) -> string? {
    if found {
        return "found"; 
    } else {
        return None;
    }
}
