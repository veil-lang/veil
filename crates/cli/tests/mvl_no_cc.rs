use std::fs;
use std::io::Write;

#[test]
fn mvl_build_generates_c_and_hir_dump_with_no_cc() {
    // Create a temporary directory for an isolated build
    let tempdir = tempfile::tempdir().expect("create temp dir");
    let dir = tempdir.path();

    // Write a minimal MVL program that uses `//` and `str`
    let input_path = dir.join("prog.veil");
    let mut f = fs::File::create(&input_path).expect("create prog.veil");
    let program = r#"
fn main() -> void {
    let a: i32 = 6 // 3;     /# integer division operator
    let s: str = "hi";       /# accept `str` as string alias
    let t: string = s;       /# map both to Type::String
    return;
}
"#;
    f.write_all(program.as_bytes()).expect("write prog.veil");

    // Choose an output file name (actual location will be under <input>/build/)
    let output_path = dir.join("program.exe");

    // Build with --no-cc equivalent: skip C compilation and request HIR dump
    let c_path = veil_cli::process_build(
        input_path.clone(),
        output_path.clone(),
        false,                                  // optimize
        "x86_64-unknown-linux-gnu".to_string(), // target triple (not used when skip_cc = true)
        false,                                  // verbose
        true,  // dump_norm_hir -> ensure normalized_hir.txt is written
        false, // pass_timings
        false, // cache_stats
        true,  // is_test -> avoid running the program
        true,  // skip_cc -> generate C only
    )
    .expect("process_build should succeed with --no-cc");

    // The returned path should be the generated C file (build/temp.c)
    assert!(
        c_path.extension().and_then(|e| e.to_str()) == Some("c"),
        "expected a .c file path, got {:?}",
        c_path
    );
    assert!(
        c_path.exists(),
        "generated C file should exist at {:?}",
        c_path
    );

    // Verify the C file contains the IR→C backend prologue for determinism
    let c_src = fs::read_to_string(&c_path).expect("read generated C");
    assert!(
        c_src.contains("Generated by Veil IR→C backend"),
        "C output should contain IR→C backend prologue"
    );

    // Verify normalized HIR dump was produced when dump_norm_hir = true
    let build_dir = input_path.parent().unwrap().join("build");
    let norm_hir = build_dir.join("normalized_hir.txt");
    assert!(
        norm_hir.exists(),
        "normalized_hir.txt should exist when dump_norm_hir = true (at {:?})",
        norm_hir
    );
}
