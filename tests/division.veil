/# Division operators: / (float) and // (integer) #/

test float_division_basic {
    const a = 5.0;
    const b = 2.0;
    const q = a / b;
    const _sink = q;
    return;
}

test integer_division_basic {
    const a: i32 = 5 as i32;
    const b: i32 = 2 as i32;
    const q: i32 = a // b;
    const _sink = q;
    return;
}

test division_chaining_left_associative {
    const r1 = 8.0 / 2.0 / 2.0;         /# should be (8.0 / 2.0) / 2.0 = 2.0 #/
    const r2: i32 = (8 as i32) // (2 as i32) // (2 as i32);  /# (8 // 2) // 2 = 2 #/
    const _r1 = r1;
    const _r2 = r2;
    return;
}

test integer_division_no_spaces_tokenization {
    const r: i32 = 6 // 3;   /# ensure // token recognized #/
    const _r = r;
    return;
}

test mixed_division_with_casts {
    const f = 10.0 / 4.0;             /# 2.5 #/
    const i: i32 = 9 as i32;
    const j: i32 = 4 as i32;
    const m: f64 = f + (i // j) as f64; /# 2.5 + 2.0 = 4.5 #/
    const _m = m;
    return;
}

test precedence_integer_side {
    /# Expect a + ((b // c) * d) #/
    const a: i32 = 1 as i32;
    const b: i32 = 8 as i32;
    const c: i32 = 2 as i32;
    const d: i32 = 3 as i32;
    const r: i32 = a + b // c * d;
    const _r = r;
    return;
}

test precedence_float_then_integer {
    /# (a / b) + ((c // d) as f64) #/
    const a = 9.0;
    const b = 3.0;
    const c: i32 = 7 as i32;
    const d: i32 = 2 as i32;
    const r: f64 = (a / b) + (c // d) as f64;
    const _r = r;
    return;
}

test division_assignment_ops_float {
    var mut x: f64 = 20.0;
    x /= 4.0;   /# becomes 5.0 #/
    const _x = x;
    return;
}

test division_assignment_ops_integer {
    const x: i32 = 7 as i32;
    const y: i32 = 2 as i32;
    const r: i32 = x // y;
    const _r = r;
    return;
}

test negative_operands_division {
    const a = -6.0 / 4.0;
    const b: i32 = (-6 as i32) // (4 as i32);
    const _a = a;
    const _b = b;
    return;
}
