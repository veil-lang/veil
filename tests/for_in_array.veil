fn assert_true(cond: bool) -> void {
    if !cond {
        println("assert_true failed");
        panic("assert failed");
    }
}

fn assert_eq_i32(a: i32, b: i32) -> void {
    if a != b {
        println(`assert_eq_i32 failed: ${a} != ${b}`);
        panic("assert failed");
    }
}

test for_in_array_values_sum {
    let arr: i32[] = [];
    arr = arr.append(1 as i32);
    arr = arr.append(2 as i32);
    arr = arr.append(3 as i32);
    arr = arr.append(4 as i32);

    let sum = 0 as i32;
    for v in arr {
        sum = sum + v;
    }

    assert_eq_i32(sum, 10 as i32);
}

test for_in_array_value_and_index {
    let arr: i32[] = [];
    arr = arr.append(5 as i32);
    arr = arr.append(7 as i32);
    arr = arr.append(9 as i32);

    let count = 0 as i32;
    let last_idx = -1 as i32;

    for v, i in arr {
        assert_eq_i32(arr[i], v);
        count = count + 1 as i32;
        last_idx = i;
    }

    assert_eq_i32(count, 3 as i32);
    assert_eq_i32(last_idx, arr.length() - 1 as i32);
}

test for_in_empty_array_yields_zero_iterations {
    let arr: i32[] = [];
    let count = 0 as i32;

    for _v in arr {
        count = count + 1 as i32;
    }

    assert_eq_i32(count, 0 as i32);
}

test for_in_append_during_iteration_does_not_expand_iteration {
    let arr: i32[] = [];
    arr = arr.append(10 as i32);
    arr = arr.append(20 as i32);
    arr = arr.append(30 as i32);

    let visited = 0 as i32;

    for v, i in arr {
        if i == 0 as i32 {
            /# Append during iteration; iteration should still visit original length only
            arr = arr.append(40 as i32);
        }
        visited = visited + 1 as i32;
    }

    /# We expect to have visited only the first 3 elements
    assert_eq_i32(visited, 3 as i32);
    /# But the array length after loop should reflect the append
    assert_eq_i32(arr.length(), 4 as i32);
}

test for_in_mutation_of_values_reflected_in_body_only {
    let arr: i32[] = [];
    arr = arr.append(1 as i32);
    arr = arr.append(2 as i32);
    arr = arr.append(3 as i32);

    let sum = 0 as i32;

    for v, i in arr {
        /# Mutate the array after reading v; read should reflect original element at i
        assert_eq_i32(v, arr[i]);
        arr = arr.append(99 as i32); /# does not affect current iteration order or count
        sum = sum + v;
    }

    assert_eq_i32(sum, 6 as i32);
    assert_true(arr.length() >= 3 as i32);
}
