import std/io;

#[header="stdlib.h"]
foreign fn exit(code: i32) -> void;

#[header="string.h"]
foreign fn strlen(s: string) -> size_t;

foreign fn ve_array_length(arr: rawptr) -> i32;

#[no_emit_decl="true"]
foreign fn ve_array_append_i32(arr: rawptr, item: i32) -> rawptr;
#[no_emit_decl="true"]
foreign fn ve_array_append_string(arr: rawptr, item: string) -> rawptr; 
#[no_emit_decl="true"]
foreign fn ve_array_append_bool(arr: rawptr, item: bool) -> rawptr;

#[header="string.h", no_emit_decl="true"]
foreign fn memcpy(dest: rawptr, src: rawptr, n: size_t) -> rawptr;


export fn panic(msg: string) -> void {
    println(`Panic: ${msg}`);
    exit(1);   
}

impl string {
    fn length(self) -> i32 {
        return strlen(self) as i32;
    }
}

impl string[] {
    fn length(self) -> i32 {
        return ve_array_length(self as rawptr) as i32;
    }
      fn append(self, item: string) -> string[] {
        return ve_array_append_string(self as rawptr, item) as string[];
    }
}

impl i32[] {
    fn length(self) -> i32 {
        return ve_array_length(self as rawptr) as i32;
    }
      fn append(self, item: i32) -> i32[] {
        return ve_array_append_i32(self as rawptr, item) as i32[];
    }
}

impl bool[] {
    fn length(self) -> i32 {
        return ve_array_length(self as rawptr) as i32;
    }    fn append(self, item: bool) -> bool[] {
        return ve_array_append_bool(self as rawptr, item) as bool[];
    }
}


